---
- name: Install required packages
  package:
    name: '{{ item }}'
    state: present
  with_items: '{{ required_packages }}'

- name: Add filter user
  command: useradd -r -c "Postfix Filters" -d /var/spool/filter filter

- name: Update main.cf Postfix configuration after comments entry
  lineinfile:
    dest: "/etc/postfix/{{ postfix_main_config_file }}"
    line: "{{ item.name }} = {{ item.value }}"
    regexp: "^#{{ item.name }} ="
    insertafter: "^#{{ item.name }} ="
  with_items:
    - name: "myorigin"
      value: "{{ postfix_myorigin }}"
    - name: "mydomain"
      value: "{{ postfix_mydomain }}"
    - name: "mynetworks"
      value: "{{ postfix_mynetworks }}"
    - name: "relayhost"
      value: "{{ postfix_relayhost }}"
    - name: "header_checks"
      value: "{{ postfix_header_checks_main_cf }}"
    - name: smtp_tls_security_level
      value: "{{ postfix_smtp_tls_security_level }}"
    - name: smtp_tls_CAfile
      value: "{{ postfix_smtp_tls_CAfile }}"
    - name: milter_protocol
      value: "{{ postfix_milter_protocol }}"
    - name: milter_default_action
      value: "{{ postfix_milter_default_action }}"
    - name: smtpd_milters
      value: "{{ postfix_smtpd_milters }}"
    - name: non_smtpd_milters
      value: "{{ postfix_non_smtpd_milters }}"

- name: Update main.cf Postfix configuration without comment entry
  lineinfile:
    dest: "/etc/postfix/{{ postfix_main_config_file }}"
    line: "{{ item.name }} = {{ item.value }}"
    regexp: "^{{ item.name }} ="
  with_items:
    - name: inet_interfaces
      value: "{{ postfix_inet_interfaces }}"
    - name: inet_protocols
      value: "{{ postfix_inet_protocols }}"

- name: Update master.cf smtp Postfix configuration.
  lineinfile:
    dest: "/etc/postfix/{{ postfix_master_config_file }}"
    line: '{{ item }}'
    regexp: '^smtp      inet'
    insertbefore: '^#smtp      inet'
  with_items: '{{ postfix_content_filter }}'

- name: Update master.cf dfilt Postfix configuration.
  lineinfile:
    path: "/etc/postfix/{{ postfix_master_config_file }}"
    line: '{{ item }}'
  with_items: '{{ postfix_dfilt }}'

- name: Update header checks Postfix configuration.
  lineinfile:
    path: "/etc/postfix/{{ postfix_header_checks_config_file }}"
    line: '{{ item }}'
  with_items: '{{ postfix_header_checks }}'

- name: Install postfix disclaimer configs
  copy:
    src: "{{ item }}"
    dest: "/etc/postfix/{{ item }}"
    mode: 0644
  with_items: '{{ postfix_disclaimer_config }}' 

- name: Update opendkim.conf configuration without comments entry
  lineinfile:
    dest: "{{ opendkim_config_path }}"
    line: "{{ item.name }}{{ item.value }}"
    regexp: "^{{ item.name }}"
  with_items:
    - name: Mode
      value: "{{ opendkim_mode }}"
    - name: Socket
      value: "{{ opendkim_socket }}"
    - name: KeyFile
      value: "{{ opendkim_keyfile }}"

- name: Update opendkim.conf configuration after comments entry
  lineinfile:
    dest: "{{ opendkim_config_path }}"
    line: "{{ item.name }}{{ item.value }}"
    regexp: "^# {{ item.name }}"
    insertafter: "^# {{ item.name }}"
  with_items:
    - name: KeyTable
      value: "{{ opendkim_keytable }}"
    - name: SigningTable
      value: "{{ opendkim_signingtable }}"
    - name: SignatureAlgorithm
      value: "{{ opendkim_signaturealgorithm }}"

- name: Create /var/spool/filter directory
  file:
    path: "{{ spool_filter_dir }}"
    state: directory
    owner: filter
    group: filter
    mode: 0750

- name: Create keys directory
  file:
    path: "{{ item[0] }}"
    state: directory
    owner: '{{ item[1] }}'
    group: '{{ item[2] }}'
    mode: 0750
  loop: "{{ keys_dir|product(users, user_groups)|list }}"

- name: Create ch-mail.private file
  file:
    path: "{{ item[0] }}"
    state: touch
    owner: '{{ item[1] }}'
    group: '{{ item[2] }}'
    mode: 0600
  loop: "{{ ch_mail_private_file|product(users, user_groups)|list }}"

- name: Add config to opendkim KeyTable
  lineinfile:
    path: "{{ key_table_path }}"
    line: '{{ item }}'
  with_items: "{{ key_table_config }}"

- name: Add config to opendkim SigningTable
  lineinfile:
    path: "{{ signing_table_path }}"
    line: '{{ item }}'
  with_items: '{{ signing_table_config }}'

- name: Change permissions for disclaimer
  file:
    path: "{{ disclaimer_path }}"
    group: filter
    mode: 0750

- name: Install disclaimer compiled file for selinux policy to allow disclaimer script to run
  copy:
    src: "{{ disclaimer_compiled_file }}"
    dest: "/tmp/{{ disclaimer_compiled_file }}"
    mode: 0644

- name: Run selinux policy load on disclaimer compiled file
  command: semodule -i /tmp/disclaimer.pp

- name: Remove disclaimer compiled file
  ansible.builtin.file:
    path: "/tmp/{{ disclaimer_compiled_file }}"
    state: absent

- name: Ensure postfix is started and enabled at boot.
  service:
    name: postfix
    state: "{{ service_state }}"
    enabled: "{{ service_enabled }}"

- name: Ensure opendkim is started and enabled at boot.
  service:
    name: opendkim
    state: "{{ service_state }}"
    enabled: "{{ service_enabled }}"

- name: Copy syslog file over with owner and permissions. 
  ansible.builtin.copy:
    src: syslog
    dest: /etc/logrotate.d/
    owner: root
    group: root
    mode: '0644'

- name: Restart rsyslog. 
  ansible.builtin.service:
    name: rsyslog
    state: restarted

- name: Copy maillog rotate script over with owner and permissions. 
  ansible.builtin.copy:
    src: maillog-rotate.sh
    dest: /home/ssm-user/
    owner: root
    group: root
    mode: '0744'

- name: Install unzip.
  package:
    name: unzip
    state: latest

- name: Check if AWS ClI executable exists.
  stat: 
    path: /usr/local/bin/aws
  register: aws_cli_stat

- name: "Get and install AWS CLI"
  block:
    - name: Download AWS CLI.
      ansible.builtin.get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscli-exe-linux-x86_64.zip
        mode: '0644'

    - name: Extract AWS CLIv2 zip
      ansible.builtin.unarchive:
        src: /tmp/awscli-exe-linux-x86_64.zip
        dest: /tmp/
        remote_src: yes

    - name: Install AWS CLIv2
      ansible.builtin.command: sh /tmp/aws/install
      args:
        creates: /usr/local/bin/aws
  when: (aws_cli_stat.stat.exists == false) or (update_aws_cli)

- name: Remove unzip
  package: 
    name: unzip
    state: absent
